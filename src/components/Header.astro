---
const currentPath = Astro.url.pathname;
console.log(currentPath);

const filters = ["design", "development", "user research"];
---

<script>
  // The key is the filter's 'value' from the checkbox.
  // The value is an array of all the data-category tags it should match.
  const filterAliases = {
    "user research": ["user research", "ux"],
    development: ["development", "web development", "dev", "coding"],
    design: ["design", "web design", "UI"],
  };

  const handleOptionChange = () => {
    // Get the base selection from checked boxes (e.g., ["user research"])
    const selection = [
      ...document.querySelectorAll(".filteroption:checked"),
    ].map(($input) => $input.value);

    console.log(selection);

    // 2. Expand the selection to include all alias tags.
    const expandedSelection = selection.flatMap(
      (filter) => filterAliases[filter] || filter,
    );

    console.log(expandedSelection);

    const allProjects = document.querySelectorAll("[data-category]");
    const noResultsMessage = document.querySelector(".noResults");

    console.log(noResultsMessage);

    if (expandedSelection.length === 0) {
      allProjects.forEach(($li) => $li.classList.add("hidden"));
      noResultsMessage.classList.remove("hidden");
    } else {
      noResultsMessage.classList.add("hidden");
    }

    allProjects.forEach(($li) => {
      const projectCategories = $li.dataset.category.split(",");
      console.log(projectCategories);

      // 3. Check if the project has any of the tags from the EXPANDED list.
      const shouldBeVisible = projectCategories.some((category) =>
        expandedSelection.includes(category),
      );

      if (shouldBeVisible) {
        $li.classList.remove("hidden");
      } else {
        $li.classList.add("hidden");
      }
    });
  };

  const options = document.querySelectorAll(".filteroption");
  options.forEach((option) =>
    option.addEventListener("click", handleOptionChange),
  );
</script>

<style>
  header {
    position: sticky;
  }

  .nav {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin: 1rem;
  }

  .nav__title {
    font-size: var(--fs-3);
    font-style: normal;
    font-weight: 600;
    line-height: normal;
  }

  .nav__title a {
    color: var(--text-color);
    text-decoration: none;
  }

  .nav__list {
    display: flex;
    font-weight: 300;
  }

  .nav__item a {
    color: var(--text-color);
    text-decoration: none;

    border-bottom: 1px solid transparent; /* Initial state */
    border-color: transparent;
    transition: border-color 0.3s ease;
    padding-bottom: 0.1rem;
  }

  .nav__item + .nav__item::before {
    content: "/";
    margin: 0.5rem;
    text-decoration: none;
  }

  .nav__title:hover {
    animation: wiggle 0.5s ease; /* Apply the wiggle animation on hover */
  }

  .nav__item a {
    /* Additional styling */
    position: relative;
    outline: none !important;
    transition: 1.2s;
  }

  .nav__item a::after {
    content: "";
    background-color: black;
    position: absolute;
    bottom: 0;
    left: 0;
    height: 1px;
    width: 0;
    transition: 0.2s;
  }

  .nav__item a:hover::after,
  .nav__item a:focus::after {
    width: 100%;
  }

  .modus__list,
  .filter__list {
    display: flex;
    gap: calc(var(--space-2xs) / 2);
    font-weight: 300;
  }

  .modus__item,
  .filter__item {
    border: 0.75px solid black;
    border-radius: 100px;
    padding: 0 var(--space-2xs);

    text-transform: lowercase;

    transition:
      background-color 0.5s,
      color 0.25s;
  }

  .modus__item a {
    text-decoration: none;
    color: black;
  }

  .modus__item--active,
  .filter__item:has(input:checked) {
    background-color: black;
    color: var(--bg-color);
    font-weight: 400;
  }

  .modus__item:hover a {
    color: var(--bg-color);
  }

  .modus__item:hover {
    background-color: black;
  }

  .filter__item input {
    display: none;
  }

  @keyframes wiggle {
    0% {
      transform: rotate(0deg); /* Start at the original position */
    }
    25% {
      transform: rotate(5deg); /* Rotate a little bit to the right */
    }
    50% {
      transform: rotate(-5deg); /* Rotate a little bit to the left */
    }
    75% {
      transform: rotate(5deg); /* Rotate a little bit to the right */
    }
    100% {
      transform: rotate(0deg); /* End at the original position */
    }
  }

  @media screen and (min-width: 48rem) {
    .nav {
      margin-bottom: var(--space-2xs);
    }

    header {
      top: 0;
      padding: 1rem;
      margin: calc(var(--space-m) - 1rem);
      background-color: (var(--bg-color) / 100%);
      backdrop-filter: blur(20px);
      z-index: 100;

      mask-image: linear-gradient(to bottom, black 75%, transparent 100%);
      -webkit-mask-image: linear-gradient(
        to bottom,
        black 75%,
        transparent 100%
      );
    }
  }
</style>

<header class="container">
  <nav class="nav">
    <h1 class="nav__title"><a href="/">Jana</a></h1>

    {
      currentPath === "/projects" ? (
        <ul class="filter__list">
          {filters.map((filter) => (
            <li class="filter__item">
              <label>
                <span>{filter}</span>
                <input
                  class="filteroption"
                  type="checkbox"
                  value={filter}
                  name="filter"
                  checked
                />
              </label>
            </li>
          ))}
        </ul>
      ) : (
        <ul class="modus__list">
          <li class="modus__item modus__item--active">normal</li>
          <li class="modus__item">
            <a href="/discover">discover</a>
          </li>
        </ul>
      )
    }

    <ul class="nav__list" id="nav__list">
      <li class="nav__item"><a href="/projects">projects</a></li>
      <li class="nav__item"><a href="/about">about</a></li>
    </ul>
  </nav>
</header>
